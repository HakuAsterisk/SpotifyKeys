@page "/UserSide"
@rendermode InteractiveServer

<style>
/*CSS*/
</style>

<MudGrid>
    <!-- Top Row for the Return Home button -->
    <MudItem xs="12">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateHome" Style="position: absolute; left: 10px; top: 10px;">
            Return Home
        </MudButton>
    </MudItem>

    <!-- Centered Column for the other elements -->
    <MudItem xs="12">
        <div style="display: flex; flex-direction: column; align-items: center; margin-top: 50px;">

            <!-- Search Text Field -->
            <MudTextField @bind-Value="UserInput" Label="Search for a song..." Variant="Variant.Outlined" Immediate="true"
              TextChanged="OnSearchInput" OnKeyDown="HandleKeyDown" />

            <!-- Suggested Songs List Overlay -->
            @if (suggestedSongs.Any())
            {
                    <MudList Class="z-30" T="FullTrack" Color="Color.Tertiary" Style="max-width: 600px; margin: auto; margin-top: 10px;">
                        @foreach (var track in suggestedSongs)
                        {
                            <MudListItem OnClick="() => SelectSong(track)">
                                        <AvatarContent>
                                            <MudAvatar>
                                                <MudImage Src="@track.Album.Images[0].Url" Alt="Album cover" />
                                            </MudAvatar>
                                        </AvatarContent>
                                        <ChildContent>
                                            <MudText Typo="Typo.h6">@track.Name</MudText>
                                            <MudText Typo="Typo.input">@track.Artists[0].Name</MudText>
                                        </ChildContent>
                            </MudListItem>
                        }
                    </MudList>
            }   

            <!-- Search Button -->
            <MudButton OnClick="SaveInput" Variant="Variant.Filled" Color="Color.Primary" Style="margin-bottom: 20px;">
                Search
            </MudButton>

            <!-- Album Image and Spotify Link -->
            @if (!string.IsNullOrEmpty(songResult))
            {
                @if (!string.IsNullOrEmpty(albumImageUrl))
                {
                    <MudImage Src="@albumImageUrl" Alt="Album cover" Style="width: 200px; margin-bottom: 10px;" />
                }
                @if (!string.IsNullOrEmpty(songUrl))
                {
                    <MudLink Href="@songUrl" Target="_blank" Style="text-align: center; margin-bottom: 20px;">
                        Listen on Spotify
                    </MudLink>
                }
            }
        </div>
    </MudItem>
</MudGrid>


@code {   
    private string UserInput = "";
    private FullTrack userSelect;
    public string songResult = "";
    public string albumImageUrl = "";
    public string songUrl = "";
    private List<FullTrack> suggestedSongs = new List<FullTrack>();
    private CancellationTokenSource cts;
    private bool suppressTextChange = false;

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task OnSearchInput()
    {
        if (suppressTextChange)
        {
            suppressTextChange = false; // Reset flag
            return; // Skip processing if suppressing
        }
        // Cancel any ongoing request if the user is typing
        cts?.Cancel();
        cts = new CancellationTokenSource();

        // Add a debounce delay to avoid overloading the API
        try
        {
            await Task.Delay(500, cts.Token);

            // Only proceed if the request hasn't been canceled and the input length is sufficient
            if (!cts.Token.IsCancellationRequested && UserInput.Length > 1)
            {
                suggestedSongs = await SpotifyService.SearchTrack(UserInput);
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore, as this happens if the user types quickly
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveInput();
        }
    }

    public async Task SaveInput()
    {
        songResult = userSelect.Name;
        albumImageUrl = userSelect.Album.Images[0].Url;
        songUrl = userSelect.ExternalUrls["spotify"];

        suggestedSongs.Clear();
    }

    private void SelectSong(FullTrack track)
    {
        // Suppress the TextChanged event temporarily
        suppressTextChange = true;

        // Set UserInput to the selected track's name
        UserInput = track.Name;

        // Optional: if you want to store the selected track for later use
        userSelect = track;

        // Clear the suggestions list
        suggestedSongs.Clear();
    }
}
