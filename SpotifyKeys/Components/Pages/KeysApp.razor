@page "/KeysApp"
@rendermode InteractiveServer
@using SpotifyKeys.Components.Services;
@using SpotifyAPI.Web;
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IJSRuntime JS
@inject SpotifyService SpotifyService
@inject ApiVerified ApiVerified
<!--Above we find and add our service files with the using and inject keywords
 so we can use them as methods in this blazor component-->

<style>
/*CSS*/
</style>

<div>
    <input @bind="UserInput" @oninput="OnSearchInput" @onkeydown="HandleKeyDown" placeholder="Search for a song..." />
    <button @onclick="SaveInput">Search</button>
</div>

@if (!string.IsNullOrEmpty(songResult))
{
    <p>@songResult</p>
    @if (!string.IsNullOrEmpty(albumImageUrl))
    {
        <img src="@albumImageUrl" alt="Album cover" style="width: 200px; height: auto;" />
    }
    @if (!string.IsNullOrEmpty(songUrl))
    {
        <p><a href="@songUrl" target="_blank">Listen on Spotify</a></p>
    }
}

@if (suggestedSongs.Any())
{
    <ul>
        @foreach (var song in suggestedSongs)
        {
            <li @onclick="() => SelectSong(song)">@song</li>
        }
    </ul>
}

@code {
    public string UserInput = "";
    public string songResult = "";
    public string albumImageUrl = "";
    public string songUrl = "";
    private List<string> suggestedSongs = new List<string>();
    private CancellationTokenSource cts;

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        UserInput = e.Value.ToString();

        cts?.Cancel();
        cts = new CancellationTokenSource();
        await Task.Delay(500, cts.Token);

        if (!cts.Token.IsCancellationRequested && UserInput.Length > 1)
        {
            suggestedSongs = await SpotifyService.SearchTrack(UserInput);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveInput();
        }
    }

    public async Task SaveInput()
    {
        var result = await SpotifyService.GetTrack(UserInput);
        songResult = result.Item1;
        albumImageUrl = result.Item2;
        songUrl = result.Item3;

        Console.WriteLine(songResult);

        suggestedSongs.Clear();
    }

    private void SelectSong(string song)
    {
        UserInput = song;
        suggestedSongs.Clear();
    }
}