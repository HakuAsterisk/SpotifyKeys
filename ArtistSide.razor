@page "/ArtistSide"
@rendermode InteractiveServer
@inject HttpClient Http

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateHome">
    Return Home
</MudButton>

<MudContainer Class="mt-12" MaxWidth="MaxWidth.Small">
    <div class="mud-elevation-20 pa-8">

        <MudTextField @bind-Value="@searchQuery" Label="Search for the song you'd like to highlight" Variant="Variant.Filled" 
        Required="true" RequiredError="Please enter query!" />

        <div class=" d-flex flex-column align-center pb-12 mt-4">
            <MudButton OnClick="PerformSearch" Color="Color.Primary" Variant="Variant.Filled">Find me a song</MudButton>
        </div>

        @if (@albumName != "") 
        {
        <div class="d-flex justify-center">
            <MudCard Class="ma-4 mb-8" Style="width: 300px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Align="Align.Left" Typo="Typo.subtitle2">@albumName</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                    <MudCardMedia Image="@albumImage" />
                <MudCardContent>
                    <MudText Align="Align.Center" Typo="Typo.h6">@songName</MudText>
                    <MudText Align="Align.Center" Typo="Typo.subtitle1">@artistName</MudText>
                </MudCardContent>
            </MudCard>
        </div>
        }

        <div class="d-flex justify-center">
            <MudButton 
            @onclick="async () => { chosenButton = 1; await SaveHighLight(); }" 
            Style="width: 50px; height: 55px; background-color: #606271; outline-width: 1px; outline-style: solid; outline-color: white;" 
            Class="ma-4 mr-8" 
            Variant="Variant.Filled"
            >
            <img src="images/key.png" alt="Logo of a key" width="45" height="45">
            </MudButton>
            <MudButton 
            @onclick="async () => { chosenButton = 2; await SaveHighLight(); }" 
            Style="width: 50px; height: 55px; background-color: #606271; outline-width: 1px; outline-style: solid; outline-color: white;" 
            Class="ma-4 mr-8" 
            Variant="Variant.Filled"
            >
            <img src="images/key.png" alt="Logo of a key" width="45" height="45">
            </MudButton>
            <MudButton 
            @onclick="async () => { chosenButton = 3; await SaveHighLight(); }" 
            Style="width: 50px; height: 55px; background-color: #606271; outline-width: 1px; outline-style: solid; outline-color: white;" 
            Class="ma-4 mr-8" 
            Variant="Variant.Filled"
            >
            <img src="images/key.png" alt="Logo of a key" width="45" height="45">
            </MudButton>
        </div>
        <div class="d-flex flex-column align-center">
            <MudRangeSlider
                @bind-Value="_value"
                @bind-UpperValue="_upperValue"
                Class="MySlider"
                Size="Size.Large"
                Color="Color.Warning"
                Variant="Variant.Filled"
                ValueLabel="false"
                Min="0"
                Max="_max"
                Display="false"
                @bind-Value:after="ConvertSongLength"
                @bind-UpperValue:after="ConvertSongLength"
            >
            </MudRangeSlider>
                <MudText Class="pb-1">@minLengthString - @maxLengthString</MudText>
                <MudText>Please choose a part of your song to highlight</MudText>
            </div>

    </div>
</MudContainer>

@code {
    private string currentDirectory = Directory.GetCurrentDirectory();
    private string keyDir = "";

    // MudRangeSlider Variables
    private int _value = 40;
    private int _upperValue = 60;
    int _max = 100;
    // MudRangeSlider Variables end

    private string searchQuery = "";
    private string alert = "";
    private string songId = "";
    private string songName = "";
    private int songLength = 0;
    private string albumName = "";
    private string artistName = "";
    private string albumImage = "";
    private string minLengthString = "0:40";
    private string maxLengthString = "1:00";
    private int chosenButton = 0;

    private void NavigateHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task PerformSearch()
    {
        if (searchQuery == "")
        {
            alert = "Please enter a search query.";
            return;
        }
        var searchResponses = await SpotifyService.SearchTrack(searchQuery);
        var searchResponse = searchResponses[0];
        if (searchResponse == null)
        {
            alert = "No track found :(";
        }
        else
        {
            alert = "";
            songId = searchResponse.Id;
            songName = searchResponse.Name;
            songLength = searchResponse.DurationMs / 1000;
            albumName = searchResponse.Album.Name;
            artistName = searchResponse.Artists[0].Name;
            albumImage = searchResponse.Album.Images[0].Url;
            _max = songLength;
            ConvertSongLength(); // Use the initial upper value here
        }
    }

    private async Task<bool> CheckForKeys()
    {
        currentDirectory = Directory.GetCurrentDirectory();
        keyDir = Path.Combine(currentDirectory, "wwwroot", "keysDB.db");
        using var connection = new SqliteConnection($"Data Source={keyDir}");
        await connection.OpenAsync();

        var command = connection.CreateCommand();
        command.CommandText = "SELECT COUNT(1) FROM Keys WHERE songId = @songId";
        command.Parameters.AddWithValue("@songId", songId);

        var result = await command.ExecuteScalarAsync();
        var count = result == null ? 0 : (long)result;

        if (count == 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private void ConvertSongLength()
    {
        maxLengthString = $"{_upperValue / 60}:{_upperValue % 60:D2}";
        minLengthString = $"{_value / 60}:{_value % 60:D2}";
    }

    private async Task SaveHighLight()
    {
        currentDirectory = Directory.GetCurrentDirectory();
        keyDir = Path.Combine(currentDirectory, "wwwroot", "keysDB.db");
        using var connection = new SqliteConnection($"Data Source={keyDir}");
        await connection.OpenAsync();

        bool keyExists = await CheckForKeys();

        string columnStart = chosenButton switch
        {
            1 => "keyonestart",
            2 => "keytwostart",
            3 => "keythreestart",
            _ => throw new InvalidOperationException("Invalid button choice")
        };

        string columnEnd = chosenButton switch
        {
            1 => "keyoneend",
            2 => "keytwoend",
            3 => "keythreeend",
            _ => throw new InvalidOperationException("Invalid button choice")
        };

        var command = connection.CreateCommand();
        if (keyExists) // If there are keys, update them
        {
            command.CommandText = $"UPDATE Keys SET {columnStart} = @_value, {columnEnd} = @_upperValue WHERE songId = @songId";
        }
        else
        {
            command.CommandText = $"INSERT INTO Keys (songId, {columnStart}, {columnEnd}) VALUES (@songId, @_value, @_upperValue)";
        }

        command.Parameters.AddWithValue("@songId", songId);
        command.Parameters.AddWithValue("@_value", _value);
        command.Parameters.AddWithValue("@_upperValue", _upperValue);
        await command.ExecuteNonQueryAsync();
        alert = "Highlight saved successfully.";
    }
}
